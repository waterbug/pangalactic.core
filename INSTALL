Installing the Pan Galactic Engineering Framework (pangalactic)
===============================================================

Platform Notes
--------------

* The pangalactic Desktop Client (``pangalaxian.py``) should run on any
  OS for which its dependencies can be installed; it has been tested on Windows
  10, Linux (mainly Ubuntu), and OSX.

* The Virtual Galactic Engineering Repository (``vger``) server is only
  supported on Linux.

-------------------------------------------------------------------------------


Dependencies
------------

pangalactic depends on several libraries and other applications.  This section
specifies the software required and where to obtain it.

All of the following software is free and open source.

NOTE:  Use of the "conda" package manager is *strongly* recommended.  Unless
the full Anaconda distribution (https://www.continuum.io/downloads) is required
for some other application or is already installed, the recommended practice is
to install "Miniconda" (http://conda.io/miniconda.html), which will set up the
`conda` package manager and a minimal set of associated libraries, then use
`conda` to install the dependencies listed below.

(0) Python requirements:

    - Python 3.6 or 3.7

          Configuration:  Python has binary installers for several platforms
          and can also be compiled and installed from source, but the
          recommended practice is to use the Python binary that Miniconda
          installs.  Be sure to install it configured with SSL support, as this
          is used by pangalactic (see instructions included with the Python
          distribution -- if you install from source, OpenSSL is required).

(1) pangalactic.core (base package of pangalactic)

    (1.1) Put the following channels in your '.condarc' file to install
          pangalactic.core (pangalactic.node will require more channels -- see
          below):

          channels:
            - conda-forge
            - defaults

    (1.2) Install the following dependencies of pangalactic.core:

    - inflect
      Nuanced capitalization
      * NOTE:  not in the default conda channel, use 'conda-forge' channel

          Configuration:  'conda install inflect'

    - louie (latest released version -- "Louie-latest" on PyPI**)
      Python application event signals
      * NOTE: not in the default conda channel, use locally built conda pkg
      ** NOTE:  the name of the imported pkg is "louie", as is the
                name of the locally-built conda package

          Configuration:  'conda install louie'

    - pint
      Units and quantities

          Configuration:  'conda install pint'

    - python-dateutil
      Date utilities

          Configuration:  'conda install python-dateutil'

    - pytz (latest released version)
      Correct timezones implementation
      * NOTE: is in the 'default' conda channel

          Configuration:  'conda install pytz'

    - rdflib (version 3.0.0 or greater)
      <http://rdflib.net/>
      * NOTE:  not in the default conda channel, use 'conda-forge' channel

          Configuration:  'conda install rdflib'

    - ruamel_yaml <=0.15
      * NOTE: the pin to under 0.15 is recommended by the package for
        "production" use (possibly unstable API changes) currently, this
        results in conda installing version 0.11.14

          Configuration:  'conda install ruamel_yaml'

    - SqlAlchemy
      <http://www.sqlalchemy.org>

          Configuration:  'conda install sqlalchemy'

    - tzlocal (latest released version)
      Local timezones implementation
      * NOTE: is in the conda-forge channel

          Configuration:  'conda install tzlocal'

    - xlrd
      Reads .xls files

          Configuration:  'conda install xlrd'

    - xlsxwriter (latest released version)
      Writes .xlsx files

          Configuration:  'conda install xlsxwriter'

    - xlwt
      Writes .xls files

          Configuration:  'conda install xlwt'


(2) pangalactic.node (the pangalactic GUI client package):

    *** NOTE for Linux (linux-64) *****************************************
    Use 'conda install pythonocc-core' to pull in pyqt5 and qt packages,
    AND EXCLUDE the 'defaults' channel because otherwise conda will install
    incompatible pyqt5 from 'defaults' channel with qt from conda-forge
    channel.
    ***********************************************************************

    (2.1) Put the following channels in your '.condarc' file to install
          pangalactic.node (channel '3dhubs' is not needed on Linux but may be
          needed on Windows for some pythonocc-core dependencies):

          channels:
            - tpaviot
            - pythonocc
            - 3dhubs
            - dlr-sc
            - oce
            - conda-forge
            - defaults

    (2.2) Install the following dependencies of pangalactic.node:

    - autobahn
      * NOTE: requires 'conda-forge' channel

          Configuration:  'conda install autobahn'

    - Twisted
      Asynchronous networking framework
      <http://twistedmatrix.com>
      NOTE:  autobahn can be used with asyncio or twisted -- pangalactic uses
      it with twisted.

          Configuration:  'conda install twisted'

    - PyNaCl
      Cryptography library required for autobahn to be able to use
      WAMP-Cryptosign (public key authentication).

          Configuration:  'conda install pynacl'

    - binaryornot (conda-forge)
      Detects whether a file is binary, and certain types of files

          Configuration:  'conda install binaryornot'

    - pyqt
      * NOTE: use the 'default' conda channel -- this is especially important
        on Windows, where the 'conda-forge' channel versions of 'sip' do not
        work with the default channel versions and will cause failures (this
        may require commenting out the conda-forge channel in your .condarc
        while installing pyqt)

          Configuration:  'conda install pyqt'

    - pyqtgraph
      Graphing package for pyqt apps, used for the mission concept modeler
      module, 'conops'.  NOTE:  this adds numpy as a dependency.

          Configuration:  'conda install pyqtgraph'

    - qt5reactor
      Integration of twisted reactor with PyQt5 event loop
      * NOTE: not in the default conda channel, use locally built conda pkg

          Configuration:  'conda install qt5reactor'

    - pythonocc-core
      (for CAD viewer functionality)

          Configuration: 'conda install pythonocc-core'

    - freetype >= 2.7
      freetype is a dependency of pythonocc-core but pythonocc-core package
      does not require the correct freetype version to be installed -- in which
      case a failure will be seen on Windows that is attributed to AIS.py and a
      "DLL load failed" (the issue is described in tpaviot/pythonocc-core issue
      #413).

      This install should be done *AFTER* all other dependencies have been
      installed, if 'conda list freetype' shows a version lower than 2.7.

          Configuration: 'conda install freetype=2.7'


(3) Required for pangalactic.vger (repository service):

    The items in (1) *plus* the following packages ...

    - autobahn
      * NOTE: requires 'conda-forge' channel

          Configuration:  'conda install autobahn'

    - Twisted
      Asynchronous networking framework
      <http://twistedmatrix.com>
      NOTE:  autobahn can be used with asyncio or twisted -- pangalactic uses
      it with twisted.

          Configuration:  'conda install twisted'

    - PyNaCl
      Cryptography library required for autobahn to be able to use
      WAMP-Cryptosign (public key authentication).

          Configuration:  'conda install pynacl'

    - PostgreSQL 7.4.x or later (8.x is recommended)
      <http://www.ca.postgresql.org>
      * NOTE: is in the 'default' conda channel

          Configuration:  'conda install postgresql'

          Configuration Options:  see PostgreSQL documentation for detailed
          instructions.  Since PostgreSQL will only be accessed internally
          to the VGER server, security will be significantly improved on
          platforms that support unix domain sockets by setting the
          PostgreSQL server to listen on a unix domain socket.

          *** IMPORTANT:  when running initdb, set environment variables
          ``LC_COLLATE`` and ``LC_CTYPE`` to ``C``, so that PostgreSQL will be
          able to use its indexes in LIKE and regexp queries (see the
          PostgreSQL admin docs for more info).

    - psycopg2 (latest version)
      <http://initd.org/pub/software/psycopg/>
      (Note:  current development is using psycopg2-2.0.6)
      * NOTE: is in the 'default' conda channel

          Configuration:  'conda install psycopg2'

    - python-ldap
      [to enable LDAP searches of enterprise directories, as part of
      administration of users]

        Configuration: 'conda install python-ldap'

(4) Optional

    - pyparsing
      * NOTE:  pyparsing is a dependency of rdflib and will be installed by it

      Used in p.utils.io.part21, a STEP Part 21 file parser that is not
      currently referenced by any active modules.  (May be replaced by
      'parsley' at some point)

          Configuration:  'pip install pyparsing'

---------------------------------------------------------------------------

